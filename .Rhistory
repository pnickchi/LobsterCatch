totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep14_L1.rds')
Results_dstep15_L1 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/results/Results_dstep15_L1.RDS")
Results_dstep15_L1 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/results/Results_dstep15_L1.RDS")
p = list()
p$initlambda = 1
p$realizations = 50
p$dStep = 15
Results<- Results_dstep15_L1
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
#export the result as RDS
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep14_L1.rds')
#In case we need to read an RDS or bunch them
#Results<- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/R/resultlambda2dstep5.rds")
#-------Reading in all RDS file and combining them
Results_dstep14_L1 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/results/Results_dstep14_L1.RDS")
p = list()
p$initlambda = 1
p$realizations = 50
p$dStep = 14
Results<- Results_dstep14_L1
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep14_L1.rds')
Results_dstep16_L1 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/results/Results_dstep16_L1.RDS")
p = list()
p$initlambda = 1
p$realizations = 50
p$dStep = 16
Results<- Results_dstep16_L1
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
#export the result as RDS
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep16_L1.rds')
setwd("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP")
densitydf <- list.files( path = "", pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
densitydf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/, pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
### Plotting
ggplot(densitydf, aes(x=factor(densitylambda), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Density of lobsters")
ggplot(densitydf, aes(x=factor(densitylambda), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Density of lobsters")
# to get summary stats
summarydf<- densitydf %>%
group_by(densitylambda) %>%
summarise(mean = mean(maxcatchno))
densitydf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
densitydf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
library(tidyverse)
densitydf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
View(densitydf)
dstepdf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
### Plotting
ggplot(dstepdf, aes(x=factor(densitylambda), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Density of lobsters")
View(dstepdf)
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Density of lobsters")
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Density of lobsters")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
Results_dstep01_L1 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/results/Results_dstep01_L1.RDS")
p = list()
p$initlambda = 1
p$realizations = 50
p$dStep = 0.1
Results<- Results_dstep01_L1
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep01_L1.rds')
dstepdf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
library(lobsterCatch)
library(tidyverse)
library(ggplot2)
#initialize a parameter file to pass info into the code and then put all into a function
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids = p$nrowgrids * p$ncolgrids
p$initlambda = 1 # Initial density of lobster
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993
#p$initlambda = 0.2 #is the density of lobsters at the beginning of simulation
#p$initD = 3 #is the dispersion index of lobsters on seabed at the beginning of the simulation
p$currentZoI = 15
p$radiusOfInfluence = 15
p$Trap = data.frame( x = c(3,5,6), y = c(3,5,6) )
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$howClose = 0.5
p$dStep = 1
p$lengthBased = TRUE
p$lobsterSizeFile <- 'LobsterSizeFreqs.csv'
#p$lobsterSizeFile <- 'LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = TRUE
p$q0 = 0.5
p$qmin = 0
p$realizations = 20 #number of iterations/simulations
p$tSteps = 5       #timesteps per iteration
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100  # The average size of mature lobsters
)
Simrun <- SimulateLobsterMovement(p)
setwd("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/R")
Simrun <- SimulateLobsterMovement(p)
p$realizations = 50 #number of iterations/simulations
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
saveRDS(Results, file = 'Results_dstep1_L1.rds')
p = list()
p$initlambda = 1
p$realizations = 50
p$dStep = 1
Results<- Results_dstep1_L1
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
saveRDS(resultdfcomplete, file = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/Results_dstep1_L1.rds')
dstepdf <- list.files( path = 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
### Plotting
ggplot(dstepdf, aes(x=factor(dstepmov), y=maxcatchno))+
geom_boxplot() +
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Number of lobster caught per trap")+
xlab("Lobsters movement")
ggplot(dstepdf, aes(x=factor(dstepmov), y=legalcatchwt))+
geom_boxplot()+
stat_summary(fun = "mean",aes(colour="mean")) +
ylab("Weight of legal catch") +
xlab("Lobsters movement")
library(lobsterCatch)
library(tidyverse)
library(ggplot2)
densityimapctdf <- list.files( path =
'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/density&mobilityimpact/NoSaturation/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
#---- density and movement
densityANDdstep <- list.files( path =
'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/density&mobilityimpact/NoSaturation/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
densityANDdstep$dstepmov <- as.factor(densityANDdstep$dstepmov)
densityANDdstep$densitylambda <- as.factor(densityANDdstep$densitylambda)
summarydf<- densityANDdstep %>%
group_by(densitylambda, dstepmov) %>%
summarise(mean = mean(maxcatchno))
ggplot(summarydf, aes(x = densitylambda, y = mean, group = dstepmov)) +
geom_line(aes(linetype = dstepmov, color = dstepmov))+
geom_point(aes(shape = dstepmov))+ ylab("Mean number of lobster caught per trap")+
xlab("Lobsters density") +
theme(panel.border = element_blank()) +
ggtitle("Relationship between lobster density and lobster movement
on the mean catch- No trap saturation")
ggplot(summarydf, aes(x = densitylambda, y = mean, group = dstepmov)) +
geom_line(aes(linetype = dstepmov, color = dstepmov))+
geom_point(aes(shape = dstepmov))+ ylab("Mean number of lobster caught per trap")+
xlab("Lobsters density") +
theme(panel.border = element_blank()) +
ggtitle("Relationship between lobster density and lobster movement
on the mean catch - No trap saturation")
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids = p$nrowgrids * p$ncolgrids
p$initlambda = 0.7 # Initial density of lobster
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993
#p$initlambda = 0.2 #is the density of lobsters at the beginning of simulation
#p$initD = 3 #is the dispersion index of lobsters on seabed at the beginning of the simulation
p$currentZoI = 15
p$radiusOfInfluence = 15
p$Trap = data.frame( x = c(3,5,6), y = c(3,5,6) )
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$howClose = 0.5
p$dStep = 10
p$lengthBased = TRUE
p$lobsterSizeFile <- 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$q0 = 0.5
p$qmin = 0
p$realizations = 50 #number of iterations/simulations
p$tSteps = 5       #timesteps per iteration
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100  # The average size of mature lobsters
)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
#export the result as RDS
summarydf
View(summarydf)
View(resultsdf)
View(resultdfcomplete)
setwd("C:/Users/pourfarajv/Desktop")
saveRDS(resultdfcomplete, file = 'NosatResults_dstep10_L0.7.rds')
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids = p$nrowgrids * p$ncolgrids
p$initlambda = 0.7 # Initial density of lobster
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993
#p$initlambda = 0.2 #is the density of lobsters at the beginning of simulation
#p$initD = 3 #is the dispersion index of lobsters on seabed at the beginning of the simulation
p$currentZoI = 15
p$radiusOfInfluence = 15
p$Trap = data.frame( x = c(3,5,6), y = c(3,5,6) )
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$howClose = 0.5
p$dStep = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$q0 = 0.5
p$qmin = 0
p$realizations = 50 #number of iterations/simulations
p$tSteps = 5       #timesteps per iteration
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100  # The average size of mature lobsters
)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
#export the result as RDS
saveRDS(resultdfcomplete, file = 'NosatResults_dstep5_L0.7.rds')
densitydf <- list.files( path = "C:/Users/pourfarajv/Desktop/", pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
View(densitydf)
densityANDdstep$dstepmov <- as.factor(densityANDdstep$dstepmov)
densityANDdstep <- list.files( path = "C:/Users/pourfarajv/Desktop/", pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
densityANDdstep$dstepmov <- as.factor(densityANDdstep$dstepmov)
densityANDdstep$densitylambda <- as.factor(densityANDdstep$densitylambda)
summarydf<- densityANDdstep %>%
group_by(densitylambda, dstepmov) %>%
summarise(mean = mean(maxcatchno))
ggplot(summarydf, aes(x = densitylambda, y = mean, group = dstepmov)) +
geom_line(aes(linetype = dstepmov, color = dstepmov))+
geom_point(aes(shape = dstepmov))+ ylab("Mean number of lobster caught per trap")+
xlab("Lobsters density") +
theme(panel.border = element_blank()) +
ggtitle("Relationship between lobster density and lobster movement
on the mean catch - No trap saturation")
summarydf<- densityANDdstep %>%
group_by( dstepmov) %>%
summarise(mean = mean(maxcatchno))
summarydf
summarydf<- densityANDdstep %>%
group_by( densitylambda) %>%
summarise(mean = mean(maxcatchno))
summarydf
summarydf<- densityANDdstep %>%
group_by( dstepmov) %>%
summarise(mean = mean(maxcatchno))
summarydf
#---- density and movement
densityANDdstep <- list.files( path =
'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/resultsVP/density&mobilityimpact/NoSaturation/', pattern = "*.rds", full.names = TRUE ) %>%
map_dfr(readRDS)
densityANDdstep$dstepmov <- as.factor(densityANDdstep$dstepmov)
densityANDdstep$densitylambda <- as.factor(densityANDdstep$densitylambda)
summarydf<- densityANDdstep %>%
group_by( dstepmov) %>%
summarise(mean = mean(maxcatchno))
summarydf
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids = p$nrowgrids * p$ncolgrids
p$initlambda = 0.1 # Initial density of lobster
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993
#p$initlambda = 0.2 #is the density of lobsters at the beginning of simulation
#p$initD = 3 #is the dispersion index of lobsters on seabed at the beginning of the simulation
p$currentZoI = 15
p$radiusOfInfluence = 15
p$Trap = data.frame( x = c(3,5,6), y = c(3,5,6) )
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$howClose = 0.5
p$dStep = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatch/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$q0 = 0.5
p$qmin = 0
p$realizations = 50 #number of iterations/simulations
p$tSteps = 5       #timesteps per iteration
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100  # The average size of mature lobsters
)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
View(Results)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
View(resultsdf)
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
densitylambda
dstepmov<- rep.int(p$dStep,p$realizations)
dstepmov
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov)
View(resultdfcomplete)
