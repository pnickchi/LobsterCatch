p$tSteps               <- param$tSteps[i]
p$sexBased             <- param$sexBased[i]
p$lobsterSexDist       <- param$lobsterSexDist
print( paste0('Run the simulation for parameter setting = ', i) )
Simrun[[i]]            <- SimulateLobsterMovement(p)
Results[[i]]           <- GetSimOutput(Simrun[[i]])
resultdfcomplete[[i]]  <- GetdfComplete(x = Results[[i]], extp = p)
# Uncomment the following lines to save the output as a RDS file
#saveRDS(object = Simrun[[i]],  file = paste0('results_for_debug/Set_', i, '_Simrun', '.rds') )
#saveRDS(object = Results[[i]], file = paste0('results_for_debug/Set_', i, '_Results', '.rds'))
saveRDS(object = resultdfcomplete[[i]], file = paste0('results_for_debug/Set_', i, '_resultdfcomplete', '.rds'))
}
#
# Loop over list and initialize a parameter list and execute the simulations
#
Simrun  <- list()
Results <- list()
#
# Loop over list and initialize a parameter list and execute the simulations
#
Simrun  <- list()
Results <- list()
resultdfcomplete <- list()
for(i in 1:nsettings){
p <- list()
p$nrowgrids            <- param$nrowgrids[i]
p$ncolgrids            <- param$ncolgrids[i]
p$ngrids               <- p$nrowgrids[i] * p$ncolgrids[i]
p$unitarea             <- param$unitarea[i]
p$initlambda           <- param$initlambda[i]
p$initD                <- param$initD[i]
p$shrinkage            <- param$shrinkage[i]
p$currentZoI           <- param$currentZoI[i]
p$radiusOfInfluence    <- param$radiusOfInfluence[i]
p$Trap                 <- as.data.frame(param$Trap[i])
p$ntraps               <- param$ntraps[i]
p$saturationThreshold  <- param$saturationThreshold[i]
p$howClose             <- param$howClose[i]
p$dStep                <- param$dStep[i]
p$lengthBased          <- param$lengthBased[i]
p$lobsterSizeFile      <- param$lobsterSizeFile
p$lobLengthThreshold   <- param$lobLengthThreshold[i]
p$trapSaturation       <- param$trapSaturation[i]
p$q0                   <- param$q0[i]
p$qmin                 <- param$qmin[i]
p$realizations         <- param$realizations[i]
p$tSteps               <- param$tSteps[i]
p$sexBased             <- param$sexBased[i]
p$lobsterSexDist       <- param$lobsterSexDist
print( paste0('Run the simulation for parameter setting = ', i) )
Simrun[[i]]            <- SimulateLobsterMovement(p)
Results[[i]]           <- GetSimOutput(Simrun[[i]])
resultdfcomplete[[i]]  <- GetdfComplete(x = Results[[i]], extp = p)
# Uncomment the following lines to save the output as a RDS file
#saveRDS(object = Simrun[[i]],  file = paste0('results_for_debug/Set_', i, '_Simrun', '.rds') )
#saveRDS(object = Results[[i]], file = paste0('results_for_debug/Set_', i, '_Results', '.rds'))
saveRDS(object = resultdfcomplete[[i]], file = paste0('results_for_debug/Set_', i, '_resultdfcomplete', '.rds'))
}
param[[1]]
param
library(tidyverse)
library(ggplot2)
library(dplyr)
library(usethis)
library(devtools)
load_all()
document()
#check()
#build()
# Define function
GetdfComplete = function(x, extp){
temp           <- bind_cols(x)
densitylambda       <- rep.int(p$initlambda,          p$realizations)
dstepmov            <- rep.int(p$dStep,               p$realizations)
saturationThreshold <- rep.int(p$saturationThreshold, p$realizations)
baitShrinkage       <- rep.int(p$shrinkage,           p$realizations)
res <- bind_cols(temp, densitylambda, dstepmov, saturationThreshold, baitShrinkage)
clNames <- c(
paste0('TimeToMax_Trap',    1:ncol(x$TimeToMax)),
paste0('MaxCatch_Trap',     1:ncol(x$MaxCatch)),
paste0('LegalCatchWt_Trap', 1:ncol(x$LegalCatchWt)),
paste0('TotalCatchWt_Trap', 1:ncol(x$TotalCatchWt))
)
colnames(res) <- c(clNames,'densitylambda','dstepmov','saturationThreshold','baitShrinkage')
return(res)
}
initlambda          <- c(0.1, 0.5, 1)
dStep               <- c(1, 5,  10)
nrowgrids           <- rep(200, length(initlambda) * length(dStep))
ncolgrids           <- rep(200, length(initlambda) * length(dStep))
unitarea            <- rep(100, length(initlambda) * length(dStep))
initD               <- rep(3, length(initlambda) * length(dStep))
shrinkage           <- rep(0.993, length(initlambda) * length(dStep))
currentZoI          <- rep(15, length(initlambda) * length(dStep))
radiusOfInfluence   <- rep(15, length(initlambda) * length(dStep))
saturationThreshold <- rep(5, length(initlambda) * length(dStep))
howClose            <- rep(0.5, length(initlambda) * length(dStep))
Trap                <- rep(list(data.frame( x = c(100), y = c(100))),  length(initlambda) * length(dStep))
ntraps              <- unlist( lapply(X = Trap, nrow) )
lobLengthThreshold  <- rep(115, length(initlambda) * length(dStep))
q0                  <- rep(0.5, length(initlambda) * length(dStep))
qmin                <- rep(0, length(initlambda) * length(dStep))
realizations        <- rep(50, length(initlambda) * length(dStep))
tSteps              <- rep(50, length(initlambda) * length(dStep))
sexBased            <- rep(TRUE, length(initlambda) * length(dStep))
lengthBased         <- rep(TRUE, length(initlambda) * length(dStep))
trapSaturation      <- rep(FALSE, length(initlambda) * length(dStep))
lobsterSizeFile     <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
lobsterSexDist      <- list(labels = c('M','F','MM','BF'),
prob1 = c(0.55,0.35,0.05,0.05),
prob2 = c(0.5,0.50,0,0),
lobsterMatThreshold = 100)
initlambda          <- c(0.1, 0.1, 0.1, 0.5, 0.5, 0.5, 1, 1,1)
dStep               <- c(1,1,1,5,5,5,10,10,10)
param <- list( nrowgrids=nrowgrids,
ncolgrids=ncolgrids,
unitarea=unitarea,
initlambda=initlambda,
initD=initD,
shrinkage=shrinkage,
currentZoI=currentZoI,
radiusOfInfluence=radiusOfInfluence,
Trap=Trap,
ntraps=ntraps,
saturationThreshold=saturationThreshold,
howClose=howClose,
dStep=dStep,
lengthBased=lengthBased,
lobsterSizeFile=lobsterSizeFile,
lobLengthThreshold=lobLengthThreshold,
trapSaturation=trapSaturation,
q0=q0,
qmin=qmin,
realizations=realizations,
tSteps=tSteps,
sexBased=sexBased,
lobsterSexDist=lobsterSexDist)
nsettings <- length(param$nrowgrids)
#
# Loop over list and initialize a parameter list and execute the simulations
#
Simrun  <- list()
Results <- list()
resultdfcomplete <- list()
for(i in 1:nsettings){
p <- list()
p$nrowgrids            <- param$nrowgrids[i]
p$ncolgrids            <- param$ncolgrids[i]
p$ngrids               <- p$nrowgrids[i] * p$ncolgrids[i]
p$unitarea             <- param$unitarea[i]
p$initlambda           <- param$initlambda[i]
p$initD                <- param$initD[i]
p$shrinkage            <- param$shrinkage[i]
p$currentZoI           <- param$currentZoI[i]
p$radiusOfInfluence    <- param$radiusOfInfluence[i]
p$Trap                 <- as.data.frame(param$Trap[i])
p$ntraps               <- param$ntraps[i]
p$saturationThreshold  <- param$saturationThreshold[i]
p$howClose             <- param$howClose[i]
p$dStep                <- param$dStep[i]
p$lengthBased          <- param$lengthBased[i]
p$lobsterSizeFile      <- param$lobsterSizeFile
p$lobLengthThreshold   <- param$lobLengthThreshold[i]
p$trapSaturation       <- param$trapSaturation[i]
p$q0                   <- param$q0[i]
p$qmin                 <- param$qmin[i]
p$realizations         <- param$realizations[i]
p$tSteps               <- param$tSteps[i]
p$sexBased             <- param$sexBased[i]
p$lobsterSexDist       <- param$lobsterSexDist
print( paste0('Run the simulation for parameter setting = ', i) )
Simrun[[i]]            <- SimulateLobsterMovement(p)
Results[[i]]           <- GetSimOutput(Simrun[[i]])
resultdfcomplete[[i]]  <- GetdfComplete(x = Results[[i]], extp = p)
# Uncomment the following lines to save the output as a RDS file
#saveRDS(object = Simrun[[i]],  file = paste0('results_for_debug/Set_', i, '_Simrun', '.rds') )
#saveRDS(object = Results[[i]], file = paste0('results_for_debug/Set_', i, '_Results', '.rds'))
saveRDS(object = resultdfcomplete[[i]], file = paste0('results_for_debug/Set_', i, '_resultdfcomplete', '.rds'))
}
Set_1_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_1_resultdfcomplete.rds")
View(Set_1_resultdfcomplete)
Set_2_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_2_resultdfcomplete.rds")
View(Set_2_resultdfcomplete)
Set_3_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_3_resultdfcomplete.rds")
View(Set_3_resultdfcomplete)
Set1_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set1_resultdfcomplete.rds")
View(Set1_resultdfcomplete)
Set_1_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_1_resultdfcomplete.rds")
Set_2_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_2_resultdfcomplete.rds")
Set_3_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_3_resultdfcomplete.rds")
View(Set_2_resultdfcomplete)
View(Set_1_resultdfcomplete)
Set_3_resultdfcomplete <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/results_for_debug/Set_3_resultdfcomplete.rds")
View(Set_3_resultdfcomplete)
#initialize a parameter file to pass info into the code and then put all into a function
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$Trap = data.frame( x = c(100), y = c(100) ) #3 traps were used in our sims
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$howClose = 0.5
p$dStep = 10
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$q0 = 0.5
p$qmin = 0.5 # set to 0 for initial param and to 0.5 for local depletion
p$realizations = 10 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100  # The average size of mature lobsters
)
Simrun <- SimulateLobsterMovement(p)
#initialize a parameter file to pass info into the code and then put all into a function
p = list()
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster
p$dStep = 10
p$howClose = 0.1 #initial used value was 0.5
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$q0 = 0.5
p$qmin = 0.5 # set to 0 for initial param and to 0.5 for local depletion
p$Trap = data.frame( x = c(100), y = c(100) ) #3 traps were used in our sims
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100)  # The average size of mature lobsters
p$realizations = 3 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
#initialize a parameter file to pass info into the code and then put all into a function
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster
p$dStep = 10
p$howClose = 0.1 #initial used value was 0.5
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocation lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$q0 = 0.5
p$qmin = 0.5 # set to 0 for initial param and to 0.5 for local depletion
p$Trap = data.frame( x = c(100), y = c(100) ) #3 traps were used in our sims
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100)  # The average size of mature lobsters
p$realizations = 3 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
saturationThreshold<- rep.int(p$saturationThreshold, p$realizations)
baitShrinkage<- rep.int(p$shrinkage, p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov,
saturationThreshold=saturationThreshold,
baitShrinkage= baitShrinkage)
mean(resultdfcomplete[,2])
#export the result as RDS
dstepvalue<- resultdfcomplete$dstepmov[2]
densityvalue<- resultdfcomplete$densitylambda[2]
Saturationvalue<- resultdfcomplete$saturationThreshold[2]
shrinkagefactor<- resultdfcomplete$baitShrinkage[2]
saveRDS(resultdfcomplete, sprintf('dstep%s_density%s_saturation%s_shrinkage%s.rds',dstepvalue, densityvalue, Saturationvalue, shrinkagefactor))
setwd("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13")
saveRDS(resultdfcomplete, sprintf('dstep%s_density%s_saturation%s_shrinkage%s.rds',dstepvalue, densityvalue, Saturationvalue, shrinkagefactor))
dstep10_density0.5_saturation5_shrinkage0.993 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13/dstep10_density0.5_saturation5_shrinkage0.993.rds")
View(dstep10_density0.5_saturation5_shrinkage0.993)
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster per unit area
p$dStep = 1
p$howClose = 0.1 #initial used value was 0.5
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocate lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$q0 = 0.5
p$qmin = 0.5 # set to 0 for initial param and to 0.5 for local depletion
p$Trap = data.frame( x = c(100), y = c(100) ) # A single trap in the middle of arena
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100)  # The average size of mature lobsters
p$realizations = 3 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
saturationThreshold<- rep.int(p$saturationThreshold, p$realizations)
baitShrinkage<- rep.int(p$shrinkage, p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov,
saturationThreshold=saturationThreshold,
baitShrinkage= baitShrinkage)
mean(resultdfcomplete[,2])
#export the result as RDS
dstepvalue<- resultdfcomplete$dstepmov[2]
densityvalue<- resultdfcomplete$densitylambda[2]
Saturationvalue<- resultdfcomplete$saturationThreshold[2]
shrinkagefactor<- resultdfcomplete$baitShrinkage[2]
saveRDS(resultdfcomplete, sprintf('dstep%s_density%s_saturation%s_shrinkage%s.rds',dstepvalue, densityvalue, Saturationvalue, shrinkagefactor))
dstep1_density0.5_saturation5_shrinkage0.993 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13/dstep1_density0.5_saturation5_shrinkage0.993.rds")
View(dstep1_density0.5_saturation5_shrinkage0.993)
dstep10_density0.5_saturation5_shrinkage0.993 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13/dstep10_density0.5_saturation5_shrinkage0.993.rds")
View(dstep10_density0.5_saturation5_shrinkage0.993)
mean(dstep1_density0.5_saturation5_shrinkage0.993)
mean(dstep10_density0.5_saturation5_shrinkage0.993)
mean(dstep10_density0.5_saturation5_shrinkage0.993$maxcatchno)
mean(dstep1_density0.5_saturation5_shrinkage0.993$maxcatchno)
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster per unit area
p$dStep = 1
p$howClose = 0.01 #initial used value was 0.5
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocate lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$q0 = 0.5
p$qmin = 0.5 # set to 0 for initial param and to 0.5 when no there is no trap saturation (local depletion)
p$Trap = data.frame( x = c(100), y = c(100) ) # A single trap in the middle of arena
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = FALSE
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100)  # The average size of mature lobsters
p$realizations = 3 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
saturationThreshold<- rep.int(p$saturationThreshold, p$realizations)
baitShrinkage<- rep.int(p$shrinkage, p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov,
saturationThreshold=saturationThreshold,
baitShrinkage= baitShrinkage)
mean(resultdfcomplete[,2])
#export the result as RDS
dstepvalue<- resultdfcomplete$dstepmov[2]
densityvalue<- resultdfcomplete$densitylambda[2]
Saturationvalue<- resultdfcomplete$saturationThreshold[2]
shrinkagefactor<- resultdfcomplete$baitShrinkage[2]
saveRDS(resultdfcomplete, sprintf('dstep%s_density%s_saturation%s_shrinkage%s.rds',dstepvalue, densityvalue, Saturationvalue, shrinkagefactor))
dstep1_density0.5_saturation5_shrinkage0.993 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13/dstep1_density0.5_saturation5_shrinkage0.993.rds")
View(dstep1_density0.5_saturation5_shrinkage0.993)
p = list()
p$nrowgrids = 200
p$ncolgrids = 200
p$ngrids = p$nrowgrids * p$ncolgrids
p$unitarea = 100
p$initlambda = 0.5 # Initial density of lobster per unit area
p$dStep = 1
p$howClose = 0.01 #initial used value was 0.5
p$initD = 3  #Initial Dispersion of lobster (initlambda and initD go into rpoissonD to randomly allocate lobster across the grid space)
p$shrinkage = 0.993 #initial shrinkage is 0.993
p$currentZoI = 15
p$radiusOfInfluence = 15
p$q0 = 0.5
p$qmin = 0 # set to 0 for initial param and to 0.5 when no there is no trap saturation (local depletion)
p$Trap = data.frame( x = c(100), y = c(100) ) # A single trap in the middle of arena
p$ntraps = nrow(p$Trap)
p$saturationThreshold = 5
p$lengthBased = TRUE
p$lobsterSizeFile <- 'https://raw.githubusercontent.com/vpourfaraj/lobsterCatch/main/inst/extdata/LobsterSizeFreqs.csv'
p$lobLengthThreshold = 115
p$trapSaturation = TRUE
p$sexBased <- TRUE
# The following lines creates a sex distribution
p$lobsterSexDist <- list(labels = c('M','F','MM','BF'), #male, female, mature male, berried female
prob1 = c(0.55,0.35,0.05,0.05), #their prob in population
prob2 = c(0.5,0.50,0,0), # prob of small males and females that are under lobsterMatThreshold
lobsterMatThreshold = 100)  # The average size of mature lobsters
p$realizations = 3 #number of iterations/simulations
p$tSteps = 50       #timesteps per iteration (5 was used before Feb 8th, 2023)
# p$lobsterSexDist <- ''  # in case of p$sexBased = FALSE
Simrun <- SimulateLobsterMovement(p)
Results  <- GetSimOutput(Simrun)
#unlisting the result to add parameters columns
resultsdf<- data.frame(unlist(Results, FALSE, TRUE))
#Converting to long format ( wasn't able to use pivot_longer!)
timetomax <- c(resultsdf$TimeToMax.Trap1, resultsdf$TimeToMax.Trap2, resultsdf$TimeToMax.Trap3)
maxcatchno  <- c(resultsdf$MaxCatch.Trap1, resultsdf$MaxCatch.Trap2, resultsdf$MaxCatch.Trap3)
legalcatchwt  <- c(resultsdf$LegalCatchWt.Trap1, resultsdf$LegalCatchWt.Trap2, resultsdf$LegalCatchWt.Trap3)
totalcatchwt  <- c(resultsdf$TotalCatchWt.Trap1, resultsdf$TotalCatchWt.Trap2, resultsdf$TotalCatchWt.Trap3)
#taking the params used for naming purpose
densitylambda<- rep.int(p$initlambda, p$realizations)
dstepmov<- rep.int(p$dStep,p$realizations)
saturationThreshold<- rep.int(p$saturationThreshold, p$realizations)
baitShrinkage<- rep.int(p$shrinkage, p$realizations)
resultdfcomplete <- data.frame(timetomax = timetomax,
maxcatchno = maxcatchno,
legalcatchwt = legalcatchwt,
totalcatchwt = totalcatchwt,
densitylambda = densitylambda,
dstepmov= dstepmov,
saturationThreshold=saturationThreshold,
baitShrinkage= baitShrinkage)
mean(resultdfcomplete[,2])
#export the result as RDS
dstepvalue<- resultdfcomplete$dstepmov[2]
densityvalue<- resultdfcomplete$densitylambda[2]
Saturationvalue<- resultdfcomplete$saturationThreshold[2]
shrinkagefactor<- resultdfcomplete$baitShrinkage[2]
saveRDS(resultdfcomplete, sprintf('dstep%s_density%s_saturation%s_shrinkage%s.rds',dstepvalue, densityvalue, Saturationvalue, shrinkagefactor))
dstep1_density0.5_saturation5_shrinkage0.993 <- readRDS("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023/resultsVP/April13/dstep1_density0.5_saturation5_shrinkage0.993.rds")
View(dstep1_density0.5_saturation5_shrinkage0.993)
setwd("C:/Users/pourfarajv/Desktop/Kumu_R_Visulization/AgentbasedModeling/lobsterCatchV2023")
replicate(400, 1:10)
